type instruction8 = bits(8)
type instruction16 = bits(16)
type instruction24 = bits(24)

scattered union ast 

union clause ast = CMC : (unit)
union clause ast = STC : (unit)
union clause ast = INR : (reg_8bit_num)
union clause ast = DCR : (reg_8bit_num)
union clause ast = CMA : (unit)
union clause ast = DAA : (unit)
union clause ast = NOP : (unit)
union clause ast = MOV : (reg_8bit_num, reg_8bit_num) 
union clause ast = STAX : (bits(1))
union clause ast = LDAX : (bits(1))
union clause ast = ADD : (reg_8bit_num)
union clause ast = ADC : (reg_8bit_num)
union clause ast = SUB : (reg_8bit_num)
union clause ast = SBB : (reg_8bit_num)
union clause ast = ANA : (reg_8bit_num)
union clause ast = XRA : (reg_8bit_num)
union clause ast = ORA : (reg_8bit_num)
union clause ast = CMP : (reg_8bit_num)
union clause ast = RLC : (unit)
union clause ast = RRC : (unit)
union clause ast = RAL : (unit)
union clause ast = RAR : (unit)
union clause ast = PUSH : (reg_16bit_num)
union clause ast = POP : (reg_16bit_num)
union clause ast = DAD : (reg_16bit_num)
union clause ast = INX : (reg_16bit_num)
union clause ast = DCX : (reg_16bit_num)
union clause ast = XCHG : (unit)
union clause ast = XTHL : (unit)
union clause ast = SPHL : (unit)
union clause ast = LXI : (reg_16bit_num, bits(8), bits(8))
union clause ast = MVI : (reg_8bit_num, bits(8))
union clause ast = ADI : (bits(8))
union clause ast = ACI : (bits(8))
union clause ast = SUI : (bits(8))
union clause ast = SBI : (bits(8))
union clause ast = ANI : (bits(8))
union clause ast = XRI : (bits(8))
union clause ast = ORI : (bits(8))
union clause ast = CPI : (bits(8))
union clause ast = STA : (bits(8), bits(8))
union clause ast = LDA : (bits(8), bits(8))
union clause ast = SHLD : (bits(8), bits(8))
union clause ast = LHLD : (bits(8), bits(8))
union clause ast = PCHL : (unit)
union clause ast = JMP : (bits(8), bits(8))
union clause ast = JC : (bits(8), bits(8))
union clause ast = JNC : (bits(8), bits(8))
union clause ast = JZ : (bits(8), bits(8))
union clause ast = JNZ : (bits(8), bits(8))
union clause ast = JM : (bits(8), bits(8))
union clause ast = JP : (bits(8), bits(8))
union clause ast = JPE : (bits(8), bits(8))
union clause ast = JPO : (bits(8), bits(8))
union clause ast = CALL : (bits(8), bits(8))
union clause ast = CC : (bits(8), bits(8))
union clause ast = CNC : (bits(8), bits(8))
union clause ast = CZ : (bits(8), bits(8))
union clause ast = CNZ : (bits(8), bits(8))
union clause ast = CM : (bits(8), bits(8))
union clause ast = CP : (bits(8), bits(8))
union clause ast = CPE : (bits(8), bits(8))
union clause ast = CPO : (bits(8), bits(8))
union clause ast = RET : (unit)
union clause ast = RC : (unit)
union clause ast = RNC : (unit)
union clause ast = RZ : (unit)
union clause ast = RNZ : (unit)
union clause ast = RM : (unit)
union clause ast = RP : (unit)
union clause ast = RPE : (unit)
union clause ast = RPO : (unit)
union clause ast = RST : (bits(3))
union clause ast = EI : (bits(1))
union clause ast = DI : (unit)
union clause ast = IN : (bits(8))
union clause ast = OUT: (bits(8))
union clause ast = HLT : (unit)

union clause ast = NOTFOUND8 : (bits(8))
union clause ast = NOTFOUND16 : (bits(16))
union clause ast = NOTFOUND24 : (bits(24))


/* decode8 function: decodes 8-bit instructions */
val decode8 : instruction8 -> ast
function clause decode8 (0b00111111) 
    = CMC()
function clause decode8 (0b00110111) 
    = STC()
function clause decode8 (0b00 @ r:reg_8bit_num @ 0b100) 
    = INR(r)
function clause decode8 (0b01110110)
    = HLT()
function clause decode8 (0b00 @ r:reg_8bit_num @ 0b101) 
    = DCR(r)
function clause decode8 (0b00101111)
    = CMA()
function clause decode8 (0b00100111)
    = DAA()
function clause decode8 (0b00000000)
    = NOP()
function clause decode8 (0b01 @ dst:reg_8bit_num @ src:reg_8bit_num) 
    = MOV(dst, src)
function clause decode8 (0b000 @ reg_pair: bits(1) @ 0b0010)
    = STAX(reg_pair)
function clause decode8 (0b000 @ reg_pair: bits(1) @ 0b1010)
    = LDAX(reg_pair)
function clause decode8 (0b10000 @ r:reg_8bit_num)
    = ADD(r)
function clause decode8 (0b10001 @ r:reg_8bit_num)
    = ADC(r)
function clause decode8 (0b10010 @ r:reg_8bit_num)
    = SUB(r)
function clause decode8 (0b10011 @ r:reg_8bit_num)
    = SBB(r)
function clause decode8 (0b10100 @ r:reg_8bit_num)
    = ANA(r)
function clause decode8 (0b10101 @ r:reg_8bit_num)
    = XRA(r)
function clause decode8 (0b10110 @ r:reg_8bit_num)
    = ORA(r)
function clause decode8 (0b10111 @ r:reg_8bit_num)
    = CMP(r)
function clause decode8 (0b00000111) 
    = RLC()
function clause decode8 (0b00001111) 
    = RRC()
function clause decode8 (0b00010111)
    = RAL()
function clause decode8 (0b00011111)
    = RAR()
function clause decode8 (0b11 @ r : reg_16bit_num @ 0b0101)
    = PUSH(r)
function clause decode8 (0b11 @ r : reg_16bit_num @ 0b0001)
    = POP(r)
function clause decode8 (0b00 @ r : reg_16bit_num @ 0b1001)
    = DAD(r)
function clause decode8 (0b00 @ r : reg_16bit_num @ 0b0011)
    = INX(r)
function clause decode8 (0b00 @ r : reg_16bit_num @ 0b1011)
    = DCX(r)
function clause decode8 (0b11101011)
    = XCHG()
function clause decode8 (0b11100011)
    = XTHL()
function clause decode8 (0b11111001)
    = SPHL()
function clause decode8 (0b11101001)
    = PCHL()
function clause decode8 (0b11001001)    
    = RET()
function clause decode8 (this: bits(8))
    = NOTFOUND8(this)
    
/* decode16 function: decodes 16-bit instructions */
val decode16 : bits(16) -> ast
function clause decode16 (0b00 @ r: reg_8bit_num @ 0b110 @ data: bits(8))
    = MVI(r, data)
function clause decode16 (0b11000110 @ data: bits(8))
    = ADI(data)
function clause decode16 (0b11001110 @ data: bits(8))
    = ACI(data)
function clause decode16 (0b11010110 @ data: bits(8))
    = SUI(data)
function clause decode16 (0b11011110 @ data: bits(8))
    = SBI(data)
function clause decode16 (0b11100110 @ data: bits(8))
    = ANI(data)
function clause decode16 (0b11101110 @ data: bits(8))
    = XRI(data)
function clause decode16 (0b11110110 @ data: bits(8))
    = ORI(data)
function clause decode16 (0b11111110 @ data: bits(8))
    = CPI(data)
function clause decode16(this: bits(16))
    = NOTFOUND16(this)


/* decode24 function: decodes 24-bit instructions */
val decode24 : bits(24) -> ast
function clause decode24 (0b00110010 @ low_data: bits(8) @ high_data: bits(8))
    = STA(low_data, high_data)
function clause decode24 (0b00111010 @ low_data: bits(8) @ high_data: bits(8))
    = LDA(low_data, high_data)
function clause decode24 (0b00100010 @ low_data: bits(8) @ high_data: bits(8))
    = SHLD(low_data, high_data)
function clause decode24 (0b00101010 @ low_data: bits(8) @ high_data: bits(8))
    = LHLD(low_data, high_data)
function clause decode24 (0b11000011 @ low_data: bits(8) @ high_data: bits(8))
    = JMP(low_data, high_data)
function clause decode24 (0b11011010 @ low_data: bits(8) @ high_data: bits(8))
    = JC(low_data, high_data)
function clause decode24 (0b11010010 @ low_data: bits(8) @ high_data: bits(8))
    = JNC(low_data, high_data)
function clause decode24 (0b11001010 @ low_data: bits(8) @ high_data: bits(8))
    = JZ(low_data, high_data)
function clause decode24 (0b11000010 @ low_data: bits(8) @ high_data: bits(8))
    = JNZ(low_data, high_data)
function clause decode24 (0b11111010 @ low_data: bits(8) @ high_data: bits(8))
    = JM(low_data, high_data)
function clause decode24 (0b11110010 @ low_data: bits(8) @ high_data: bits(8))
    = JP(low_data, high_data)
function clause decode24 (0b11101010 @ low_data: bits(8) @ high_data: bits(8))
    = JPE(low_data, high_data)
function clause decode24 (0b11100010 @ low_data: bits(8) @ high_data: bits(8))
    = JPO(low_data, high_data)

function clause decode24 (0b00 @ r: reg_16bit_num @ 0b0001 @ low_data: bits(8) @ high_data: bits(8))
    = LXI(r, low_data, high_data)
function clause decode24 (0b11001101 @ low_data: bits(8) @ high_data: bits(8)) 
    = CALL(low_data, high_data)
function clause decode24 (this: bits(24))
    = NOTFOUND24(this)
    